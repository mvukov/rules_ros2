workspace(name = "com_github_mvukov_rules_ros2_examples")

# This import is relevant for these examples and this (rules_ros2) repository.
local_repository(
    name = "com_github_mvukov_rules_ros2",
    path = "..",
)

# In a normal workflow, you would typically import rules_ros2 into your
# (mono)repo as follows:
# http_archive(
#     name = "com_github_mvukov_rules_ros2",
#     # Here you can use e.g. sha256sum cli utility to compute the sha sum.
#     sha256 = "<sha sum of the .tar.gz archive below>",
#     strip_prefix = "rules_ros2-<git commit SHA>",
#     url = "https://github.com/mvukov/rules_ros2/archive/<git commit SHA>.tar.gz",
# )

load("@com_github_mvukov_rules_ros2//repositories:repositories.bzl", "ros2_repositories", "ros2_workspace_repositories")

ros2_workspace_repositories()

ros2_repositories()

load("@com_github_mvukov_rules_ros2//repositories:deps.bzl", "ros2_deps")

ros2_deps()

load("@rules_python//python:repositories.bzl", "py_repositories", "python_register_toolchains")

py_repositories()

python_register_toolchains(
    name = "rules_ros2_python",
    # You must pin the Python version to the one used for rules_ros2_pip_deps_numpy_headers and current_py_cc_headers in rules_ros2.
    # Otherwise you will get errors at runtime (not build time!) like:
    #     ModuleNotFoundError: No module named 'numpy.core._multiarray_umath'
    #     Importing the numpy C-extensions failed.
    python_version = "3.12",
)

load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    name = "rules_ros2_pip_deps",
    python_interpreter_target = "@rules_ros2_python_host//:python",
    requirements_lock = "@com_github_mvukov_rules_ros2//:requirements_lock.txt",
)

load(
    "@rules_ros2_pip_deps//:requirements.bzl",
    install_rules_ros2_pip_deps = "install_deps",
)

install_rules_ros2_pip_deps()

# Below is an optional setup for Rust support for ROS 2.

load("@com_github_mvukov_rules_ros2//repositories:rust_setup_stage_1.bzl", "rust_setup_stage_1")

rust_setup_stage_1()

load("@com_github_mvukov_rules_ros2//repositories:rust_setup_stage_2.bzl", "rust_setup_stage_2")

rust_setup_stage_2()

load("@com_github_mvukov_rules_ros2//repositories:rust_setup_stage_3.bzl", "rust_setup_stage_3")

rust_setup_stage_3()

load("@com_github_mvukov_rules_ros2//repositories:rust_setup_stage_4.bzl", "rust_setup_stage_4")

rust_setup_stage_4()

# Below are internal deps only used by examples.

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "53cadea9109e646a93ed4dc90c9bbcaa8073c7c3df745b92f6a5000daf7aa3da",
    strip_prefix = "bazel-lib-2.21.2",
    url = "https://github.com/bazel-contrib/bazel-lib/releases/download/v2.21.2/bazel-lib-v2.21.2.tar.gz",
)

load("@aspect_bazel_lib//lib:repositories.bzl", "aspect_bazel_lib_dependencies", "aspect_bazel_lib_register_toolchains")

# Required bazel-lib dependencies

aspect_bazel_lib_dependencies()

# Required rules_shell dependencies
load("@rules_shell//shell:repositories.bzl", "rules_shell_dependencies", "rules_shell_toolchains")

rules_shell_dependencies()

rules_shell_toolchains()

# Register bazel-lib toolchains

aspect_bazel_lib_register_toolchains()

# Create the host platform repository transitively required by bazel-lib

load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("@platforms//host:extension.bzl", "host_platform_repo")

maybe(
    host_platform_repo,
    name = "host_platform",
)

http_archive(
    name = "rules_oci",
    sha256 = "5994ec0e8df92c319ef5da5e1f9b514628ceb8fc5824b4234f2fe635abb8cc2e",
    strip_prefix = "rules_oci-2.2.6",
    url = "https://github.com/bazel-contrib/rules_oci/releases/download/v2.2.6/rules_oci-v2.2.6.tar.gz",
)

load("@rules_oci//oci:dependencies.bzl", "rules_oci_dependencies")

rules_oci_dependencies()

load("@rules_oci//oci:repositories.bzl", "oci_register_toolchains")

oci_register_toolchains(name = "oci")

load("@rules_oci//oci:pull.bzl", "oci_pull")

oci_pull(
    name = "python_base_image",
    digest = "sha256:e0c4fae70d550834a40f6c3e0326e02cfe239c2351d922e1fb1577a3c6ebde02",
    image = "python:3.10-slim",
    platforms = ["linux/amd64"],
)

_DEB_TO_LAYER = """\
genrule(
    name = "layer",
    srcs = [":data.tar.xz"],
    outs = ["data.tar.zst"],
    cmd = "$(BSDTAR_BIN) --zstd -cf $@ @$<",
    toolchains = ["@bsd_tar_toolchains//:resolved_toolchain"],
    visibility = ["//visibility:public"],
)
"""

http_archive(
    name = "libatomic_amd64",
    build_file_content = _DEB_TO_LAYER,
    sha256 = "212b399aae2f7299203d261a57e49372e09565a9a5ea971905f94a3960366c05",
    urls = ["http://ftp.us.debian.org/debian/pool/main/g/gcc-14/libatomic1_14.2.0-19_amd64.deb"],
)
