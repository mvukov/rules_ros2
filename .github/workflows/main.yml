name: Testing

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch.
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# https://stackoverflow.com/a/72408109
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.sha}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0
  test:
    name: Run tests
    runs-on: ubuntu-20.04

    # Run bazel test with gcc and clang in each workspace
    strategy:
      matrix:
        folder:
          - "."
          - "examples"
        toolchain:
          - "gcc"
          - "clang"
        include:
          - toolchain: "gcc"
            config_option: ""
          - toolchain: "clang"
            config_option: "--config=clang"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.sha}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      # Cache build and external artifacts so that the next ci build is incremental.
      # Because github action caches cannot be updated after a build, we need to
      # store the contents of each build in a unique cache key, then fall back to loading
      # it on the next ci run. We use hashFiles(...) in the key and restore-keys- with
      # the prefix to load the most recent cache for the branch on a cache miss. You
      # should customize the contents of hashFiles to capture any bazel input sources,
      # although this doesn't need to be perfect. If none of the input sources change
      # then a cache hit will load an existing cache and bazel won't have to do any work.
      # In the case of a cache miss, you want the fallback cache to contain most of the
      # previously built artifacts to minimize build time. The more precise you are with
      # hashFiles sources the less work bazel will have to do.
      - name: Mount bazel caches
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.cache/bazel-repo
          key: v3-bazel-repo-cache-${{ hashFiles('.bazelversion', 'examples/WORKSPACE', 'repositories/**', 'requirements_lock.txt', 'WORKSPACE') }}
          restore-keys: v3-bazel-repo-cache-
      - name: bazel test ${{ matrix.config_option }} //...
        env:
          # Bazelisk will download bazel to here, ensure it is cached between runs.
          XDG_CACHE_HOME: ~/.cache/bazel-repo
          BUILDBUDDY_ORG_API_KEY: ${{ secrets.BUILDBUDDY_ORG_API_KEY }}
        working-directory: ${{ matrix.folder }}
        run: |
          if [[ ! -z "${BUILDBUDDY_ORG_API_KEY}" ]]; then
            BAZEL_REMOTE_CONFIG=(
              --config=remote
              --remote_header=x-buildbuddy-api-key="${BUILDBUDDY_ORG_API_KEY}"
            )
          fi
          bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=.bazelrc \
              test "${BAZEL_REMOTE_CONFIG[@]}" ${{ matrix.config_option }} //...
