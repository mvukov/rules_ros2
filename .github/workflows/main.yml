name: Testing

on: [push, pull_request_target]

jobs:
  pre-commit:
    name: Pre-commit checks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Run pre-commit checks
        uses: pre-commit/action@v3.0.0
  test:
    name: Run tests
    runs-on: ubuntu-20.04

    # Run bazel test in each workspace
    strategy:
      matrix:
        folder:
          - "."
          - "examples"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Check bazelrc files
        run: |
          if [[ $(cmp --silent .bazelrc examples/.bazelrc; echo $?) -ne 0 ]]; then
            echo ".bazelrc != examples/.bazelrc"
            exit 1
          fi
      # Cache build and external artifacts so that the next ci build is incremental.
      # Because github action caches cannot be updated after a build, we need to
      # store the contents of each build in a unique cache key, then fall back to loading
      # it on the next ci run. We use hashFiles(...) in the key and restore-keys- with
      # the prefix to load the most recent cache for the branch on a cache miss. You
      # should customize the contents of hashFiles to capture any bazel input sources,
      # although this doesn't need to be perfect. If none of the input sources change
      # then a cache hit will load an existing cache and bazel won't have to do any work.
      # In the case of a cache miss, you want the fallback cache to contain most of the
      # previously built artifacts to minimize build time. The more precise you are with
      # hashFiles sources the less work bazel will have to do.
      - name: Mount bazel caches
        uses: actions/cache@v3.0.11
        with:
          path: |
            ~/.cache/bazel
            ~/.cache/bazel-repo
          key: v2-bazel-cache-${{ hashFiles('**/BUILD.bazel', '**/*.BUILD.bazel', '**/*.bzl', 'WORKSPACE') }}
          restore-keys: v2-bazel-cache-
      - name: bazel test //...
        env:
          # Bazelisk will download bazel to here, ensure it is cached between runs.
          XDG_CACHE_HOME: ~/.cache/bazel-repo
        working-directory: ${{ matrix.folder }}
        run: |
          bazel --bazelrc=$GITHUB_WORKSPACE/.github/workflows/ci.bazelrc --bazelrc=.bazelrc \
              test //... \
              --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_ORG_API_KEY }}
