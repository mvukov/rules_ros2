From f95dfbef3f7b2b65ecf18c7cc70bdac84a2bb6d4 Mon Sep 17 00:00:00 2001
From: Alexander Hans <ahans@users.noreply.github.com>
Date: Wed, 18 Jan 2023 17:21:46 +0100
Subject: [PATCH] Fix use-after-free bug in BufferServer::cancelCB (#579)

`info` was a reference to the `GoalInfo` entry in `active_goals_` that
`it` pointed at. It was used after the entry had been erased from the
list (through `it`). Swapping the line with `erase` and the one with the
call to `canceled` would have been the minimal fix, but instead we do a
refactor here to improve the overall code quality and make such errors
less likely in the future.

Signed-off-by: Alexander Hans <ahans@users.noreply.github.com>
---
 tf2_ros/src/buffer_server.cpp | 27 +++++++++++++--------------
 1 file changed, 13 insertions(+), 14 deletions(-)

diff --git a/tf2_ros/src/buffer_server.cpp b/tf2_ros/src/buffer_server.cpp
index a91de83..37f8a9b 100644
--- a/tf2_ros/src/buffer_server.cpp
+++ b/tf2_ros/src/buffer_server.cpp
@@ -40,6 +40,7 @@
 #include <tf2_ros/buffer.h>  // Only needed for toMsg() and fromMsg()
 #include <tf2_ros/buffer_server.h>
 
+#include <algorithm>
 #include <list>
 #include <memory>
 #include <string>
@@ -119,20 +120,18 @@ rclcpp_action::CancelResponse BufferServer::cancelCB(GoalHandle gh)
   // we need to find the goal in the list and remove it... also setting it as canceled
   // if its not in the list, we won't do anything since it will have already been set
   // as completed
-  for (std::list<GoalInfo>::iterator it = active_goals_.begin(); it != active_goals_.end(); ) {
-    GoalInfo & info = *it;
-    if (info.handle == gh) {
-      RCLCPP_DEBUG(
-        logger_,
-        "Accept cancel request for goal %s",
-        rclcpp_action::to_string(gh->get_goal_id()).c_str());
-      it = active_goals_.erase(it);
-      auto result = std::make_shared<LookupTransformAction::Result>();
-      info.handle->canceled(result);
-      return rclcpp_action::CancelResponse::ACCEPT;
-    } else {
-      ++it;
-    }
+  auto goal_to_cancel_it = std::find_if(
+    active_goals_.begin(), active_goals_.end(), [&gh](const auto & info) {
+      return info.handle == gh;
+    });
+  if (goal_to_cancel_it != active_goals_.end()) {
+    RCLCPP_DEBUG(
+      logger_,
+      "Accept cancel request for goal %s",
+      rclcpp_action::to_string(gh->get_goal_id()).c_str());
+    goal_to_cancel_it->handle->canceled(std::make_shared<LookupTransformAction::Result>());
+    active_goals_.erase(goal_to_cancel_it);
+    return rclcpp_action::CancelResponse::ACCEPT;
   }
 
   RCLCPP_DEBUG(
-- 
2.34.1

