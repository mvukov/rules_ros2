diff --git a/rmw_implementation/src/functions.cpp b/rmw_implementation/src/functions.cpp
index 892eb40..6f8f8c0 100644
--- a/rmw_implementation/src/functions.cpp
+++ b/rmw_implementation/src/functions.cpp
@@ -20,7 +20,7 @@
 #include <stdexcept>
 #include <string>
 
-#include "ament_index_cpp/get_resources.hpp"
+// #include "ament_index_cpp/get_resources.hpp"
 
 #include "rcutils/allocator.h"
 #include "rcutils/format_string.h"
@@ -82,6 +82,7 @@ load_library()
   // 3. If that fails, try loading all other implementations available in turn
   //    until one succeeds or we run out of options.
 
+#ifndef RMW_LIBRARY_PATH
   std::string env_var;
   try {
     env_var = rcpputils::get_env_var("RMW_IMPLEMENTATION");
@@ -107,23 +108,35 @@ load_library()
 
   // OK, we failed to load the default RMW.  Fetch all of the ones we can
   // find and attempt to load them one-by-one.
-  rmw_reset_error();
-  const std::map<std::string, std::string> packages_with_prefixes = ament_index_cpp::get_resources(
-    "rmw_typesupport");
-  for (const auto & package_prefix_pair : packages_with_prefixes) {
-    if (package_prefix_pair.first != "rmw_implementation") {
-      ret = attempt_to_load_one_rmw(package_prefix_pair.first);
-      if (ret != nullptr) {
-        return ret;
-      }
-      rmw_reset_error();
-    }
-  }
+  // rmw_reset_error();
+  // const std::map<std::string, std::string> packages_with_prefixes = ament_index_cpp::get_resources(
+  //   "rmw_typesupport");
+  // for (const auto & package_prefix_pair : packages_with_prefixes) {
+  //   if (package_prefix_pair.first != "rmw_implementation") {
+  //     ret = attempt_to_load_one_rmw(package_prefix_pair.first);
+  //     if (ret != nullptr) {
+  //       return ret;
+  //     }
+  //     rmw_reset_error();
+  //   }
+  // }
 
   // If we made it here, we couldn't find an rmw to load.
 
   RMW_SET_ERROR_MSG("failed to load any RMW implementations");
 
+#else
+  const std::string library_path = RMW_LIBRARY_PATH;
+  try {
+    return std::make_shared<rcpputils::SharedLibrary>(library_path.c_str());
+  } catch (const std::exception & e) {
+    RMW_SET_ERROR_MSG_WITH_FORMAT_STRING(
+      "failed to load shared library '%s' due to %s",
+      library_path.c_str(), e.what());
+    return nullptr;
+  }
+#endif
+
   return nullptr;
 }
 
