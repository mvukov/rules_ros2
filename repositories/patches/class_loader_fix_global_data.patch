diff --git a/src/class_loader_core.cpp b/src/class_loader_core.cpp
index 56cc770..0940868 100644
--- a/src/class_loader_core.cpp
+++ b/src/class_loader_core.cpp
@@ -43,22 +43,48 @@ namespace impl
 
 // Global data
 
+class GlobalData {
+ public:
+  static GlobalData* Instance() {
+    static GlobalData instance;
+    return &instance;
+  }
+
+  auto& loaded_library_vector_mutex() { return loaded_library_vector_mutex_; }
+  auto& plugin_base_to_factory_map_map_mutex() { return plugin_base_to_factory_map_map_mutex_; }
+  auto& plugin_base_to_factory_map_map() { return plugin_base_to_factory_map_map_; }
+  auto& meta_object_graveyard() { return meta_object_graveyard_; }
+  auto& loaded_library_vector() { return loaded_library_vector_; }
+  auto& currently_loading_lib_name() { return currently_loading_lib_name_; }
+  ClassLoader*& loader() { return loader_; }
+  auto& has_a_non_pure_plugin_lib_been_opened() { return has_a_non_pure_plugin_lib_been_opened_; }
+
+ private:
+  GlobalData() = default;
+
+  std::recursive_mutex loaded_library_vector_mutex_;
+  std::recursive_mutex plugin_base_to_factory_map_map_mutex_;
+  BaseToFactoryMapMap plugin_base_to_factory_map_map_;
+  MetaObjectVector meta_object_graveyard_;
+  LibraryVector loaded_library_vector_;
+  std::string currently_loading_lib_name_;
+  ClassLoader* loader_ = nullptr;
+  bool has_a_non_pure_plugin_lib_been_opened_ = false;
+};
+
 std::recursive_mutex & getLoadedLibraryVectorMutex()
 {
-  static std::recursive_mutex m;
-  return m;
+  return GlobalData::Instance()->loaded_library_vector_mutex();
 }
 
 std::recursive_mutex & getPluginBaseToFactoryMapMapMutex()
 {
-  static std::recursive_mutex m;
-  return m;
+  return GlobalData::Instance()->plugin_base_to_factory_map_map_mutex();
 }
 
 BaseToFactoryMapMap & getGlobalPluginBaseToFactoryMapMap()
 {
-  static BaseToFactoryMapMap instance;
-  return instance;
+  return GlobalData::Instance()->plugin_base_to_factory_map_map();
 }
 
 FactoryMap & getFactoryMapForBaseClass(const std::string & typeid_base_class_name)
@@ -74,20 +100,17 @@ FactoryMap & getFactoryMapForBaseClass(const std::string & typeid_base_class_nam
 
 MetaObjectVector & getMetaObjectGraveyard()
 {
-  static MetaObjectVector instance;
-  return instance;
+  return GlobalData::Instance()->meta_object_graveyard();
 }
 
 LibraryVector & getLoadedLibraryVector()
 {
-  static LibraryVector instance;
-  return instance;
+  return GlobalData::Instance()->loaded_library_vector();
 }
 
 std::string & getCurrentlyLoadingLibraryNameReference()
 {
-  static std::string library_name;
-  return library_name;
+  return GlobalData::Instance()->currently_loading_lib_name();
 }
 
 std::string getCurrentlyLoadingLibraryName()
@@ -103,8 +126,7 @@ void setCurrentlyLoadingLibraryName(const std::string & library_name)
 
 ClassLoader * & getCurrentlyActiveClassLoaderReference()
 {
-  static ClassLoader * loader = nullptr;
-  return loader;
+  return GlobalData::Instance()->loader();
 }
 
 ClassLoader * getCurrentlyActiveClassLoader()
@@ -120,8 +142,7 @@ void setCurrentlyActiveClassLoader(ClassLoader * loader)
 
 bool & hasANonPurePluginLibraryBeenOpenedReference()
 {
-  static bool hasANonPurePluginLibraryBeenOpenedReference = false;
-  return hasANonPurePluginLibraryBeenOpenedReference;
+  return GlobalData::Instance()->has_a_non_pure_plugin_lib_been_opened();
 }
 
 bool hasANonPurePluginLibraryBeenOpened()
