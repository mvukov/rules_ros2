""" Builds CycloneDDS.
"""

load(
    "@com_github_mvukov_rules_ros2//third_party:expand_template.bzl",
    "expand_template",
)
load("@rules_cc//cc:defs.bzl", "cc_library")

expand_template(
    name = "features_h",
    template = "src/ddsrt/include/dds/features.h.in",
    out = "include/dds/features.h",
    substitutions = {
        "#cmakedefine DDS_HAS_SECURITY 1": "#undef DDS_HAS_SECURITY",
        "#cmakedefine DDS_HAS_LIFESPAN 1": "#define DDS_HAS_LIFESPAN 1",
        "#cmakedefine DDS_HAS_DEADLINE_MISSED 1": "#define DDS_HAS_DEADLINE_MISSED 1",
        "#cmakedefine DDS_HAS_NETWORK_PARTITIONS 1": "#define DDS_HAS_NETWORK_PARTITIONS 1",
        "#cmakedefine DDS_HAS_SSM 1": "#define DDS_HAS_SSM 1",
        "#cmakedefine DDS_HAS_SSL 1": "#undef DDS_HAS_SSL",
        "#cmakedefine DDS_HAS_TYPE_DISCOVERY 1": "#define DDS_HAS_TYPE_DISCOVERY 1",
        "#cmakedefine DDS_HAS_TOPIC_DISCOVERY 1": "#define DDS_HAS_TOPIC_DISCOVERY 1",
        "#cmakedefine DDS_HAS_SHM 1": "#undef DDS_HAS_SHM",
    }
)

expand_template(
    name = "config_h",
    template = "src/ddsrt/include/dds/config.h.in",
    out = "include/dds/config.h",
    substitutions = {
        "#cmakedefine DDSRT_WITH_LWIP 1": "#define DDSRT_WITH_LWIP 0",
        "#cmakedefine DDSRT_WITH_FREERTOS 1": "#define DDSRT_WITH_FREERTOS 0",
        "#cmakedefine DDSRT_HAVE_DYNLIB 1": "#define DDSRT_HAVE_DYNLIB 1",
        "#cmakedefine DDSRT_HAVE_FILESYSTEM 1": "#define DDSRT_HAVE_FILESYSTEM 1",
        "#cmakedefine DDSRT_HAVE_NETSTAT 1": "#define DDSRT_HAVE_NETSTAT 1",
        "#cmakedefine DDSRT_HAVE_RUSAGE 1": "#define DDSRT_HAVE_RUSAGE 1",
        "#cmakedefine DDSRT_HAVE_IPV6 1": "#define DDSRT_HAVE_IPV6 1",
        "#cmakedefine DDSRT_HAVE_DNS 1": "#define DDSRT_HAVE_DNS 1",
        "#cmakedefine DDSRT_HAVE_GETADDRINFO 1": "#define DDSRT_HAVE_GETADDRINFO 1",
        "#cmakedefine DDSRT_HAVE_GETHOSTBYNAME_R 1": "#define DDSRT_HAVE_GETHOSTBYNAME_R 1",
        "#cmakedefine DDSRT_HAVE_GETHOSTNAME 1": "#define DDSRT_HAVE_GETHOSTNAME 1",
        "#cmakedefine DDSRT_HAVE_INET_NTOP 1": "#define DDSRT_HAVE_INET_NTOP 1",
        "#cmakedefine DDSRT_HAVE_INET_PTON 1": "#define DDSRT_HAVE_INET_PTON 1",
    },
)

expand_template(
    name = "version_h",
    out = "include/dds/version.h",
    substitutions = {
        "@CycloneDDS_VERSION@": "0.9.0",
        "@CycloneDDS_VERSION_MAJOR@": "0",
        "@CycloneDDS_VERSION_MINOR@": "9",
        "@CycloneDDS_VERSION_PATCH@": "0",
        "@PROJECT_NAME_CAPS@": "CYCLONEDDS",
        "@PROJECT_NAME_SMALL@": "cyclonedds",
        "@PROJECT_NAME@": "CycloneDDS",
        "@CMAKE_HOST_SYSTEM_NAME@": "Linux",
        "@CMAKE_SYSTEM_NAME@": "Linux",
    },
    template = "src/ddsrt/include/dds/version.h.in",
)

genrule(
    name = "export_h",
    outs = [
        "include/dds/export.h",
    ],
    cmd = """cat > $@ << EOL

#ifndef DDS_EXPORT_H
#define DDS_EXPORT_H

#ifdef DDS_STATIC_DEFINE
#  define DDS_EXPORT
#  define DDS_NO_EXPORT
#else
#  ifndef DDS_EXPORT
#    ifdef ddsc_EXPORTS
        /* We are building this library */
#      define DDS_EXPORT __attribute__((visibility("default")))
#    else
        /* We are using this library */
#      define DDS_EXPORT __attribute__((visibility("default")))
#    endif
#  endif

#  ifndef DDS_NO_EXPORT
#    define DDS_NO_EXPORT __attribute__((visibility("hidden")))
#  endif
#endif

#ifndef DDS_DEPRECATED
#  define DDS_DEPRECATED __attribute__ ((__deprecated__))
#endif

#ifndef DDS_DEPRECATED_EXPORT
#  define DDS_DEPRECATED_EXPORT DDS_EXPORT DDS_DEPRECATED
#endif

#ifndef DDS_DEPRECATED_NO_EXPORT
#  define DDS_DEPRECATED_NO_EXPORT DDS_NO_EXPORT DDS_DEPRECATED
#endif

#if 0 /* DEFINE_NO_DEPRECATED */
#  ifndef DDS_NO_DEPRECATED
#    define DDS_NO_DEPRECATED
#  endif
#endif

#ifndef DDS_INLINE_EXPORT
#  if __MINGW32__ && (!defined(__clang__) || !defined(ddsc_EXPORTS))
#    define DDS_INLINE_EXPORT
#  else
#    define DDS_INLINE_EXPORT DDS_EXPORT
#  endif
#endif

#endif
EOL
""",
    visibility = ["//visibility:private"],
)

# Got this from a CMake build on Ubuntu 20.04 for amd64 arch.
_DDSRT_HDRS = [
    "src/ddsrt/include/dds/ddsrt/avl.h",
    "src/ddsrt/include/dds/ddsrt/fibheap.h",
    "src/ddsrt/include/dds/ddsrt/hopscotch.h",
    "src/ddsrt/include/dds/ddsrt/log.h",
    "src/ddsrt/include/dds/ddsrt/retcode.h",
    "src/ddsrt/include/dds/ddsrt/attributes.h",
    "src/ddsrt/include/dds/ddsrt/endian.h",
    "src/ddsrt/include/dds/ddsrt/arch.h",
    "src/ddsrt/include/dds/ddsrt/misc.h",
    "src/ddsrt/include/dds/ddsrt/mh3.h",
    "src/ddsrt/include/dds/ddsrt/io.h",
    "src/ddsrt/include/dds/ddsrt/process.h",
    "src/ddsrt/include/dds/ddsrt/strtod.h",
    "src/ddsrt/include/dds/ddsrt/strtol.h",
    "src/ddsrt/include/dds/ddsrt/types.h",
    "src/ddsrt/include/dds/ddsrt/countargs.h",
    "src/ddsrt/include/dds/ddsrt/static_assert.h",
    "src/ddsrt/include/dds/ddsrt/circlist.h",
    "src/ddsrt/include/dds/ddsrt/atomics.h",
    "src/ddsrt/include/dds/ddsrt/atomics/arm.h",
    "src/ddsrt/include/dds/ddsrt/atomics/gcc.h",
    "src/ddsrt/include/dds/ddsrt/atomics/msvc.h",
    "src/ddsrt/include/dds/ddsrt/atomics/sun.h",
    "src/ddsrt/include/dds/ddsrt/cdtors.h",
    "src/ddsrt/include/dds/ddsrt/environ.h",
    "src/ddsrt/include/dds/ddsrt/heap.h",
    "src/ddsrt/include/dds/ddsrt/ifaddrs.h",
    "src/ddsrt/include/dds/ddsrt/random.h",
    "src/ddsrt/include/dds/ddsrt/rusage.h",
    "src/ddsrt/include/dds/ddsrt/sockets.h",
    "src/ddsrt/include/dds/ddsrt/sockets/posix.h",
    "src/ddsrt/include/dds/ddsrt/sockets/windows.h",
    "src/ddsrt/include/dds/ddsrt/string.h",
    "src/ddsrt/include/dds/ddsrt/sync.h",
    "src/ddsrt/include/dds/ddsrt/sync/freertos.h",
    "src/ddsrt/include/dds/ddsrt/sync/posix.h",
    "src/ddsrt/include/dds/ddsrt/sync/windows.h",
    "src/ddsrt/include/dds/ddsrt/threads.h",
    "src/ddsrt/include/dds/ddsrt/threads/freertos.h",
    "src/ddsrt/include/dds/ddsrt/threads/posix.h",
    "src/ddsrt/include/dds/ddsrt/threads/windows.h",
    "src/ddsrt/include/dds/ddsrt/time.h",
    "src/ddsrt/include/dds/ddsrt/time/freertos.h",
    "src/ddsrt/include/dds/ddsrt/md5.h",
    "src/ddsrt/include/dds/ddsrt/netstat.h",
    "src/ddsrt/include/dds/ddsrt/dynlib.h",
    "src/ddsrt/include/dds/ddsrt/filesystem.h",
    "src/ddsrt/include/dds/ddsrt/filesystem/posix.h",
    "src/ddsrt/include/dds/ddsrt/filesystem/windows.h",
    # Manually added:
    "src/ddsrt/include/dds/ddsrt/types/posix.h",
    "src/ddsrt/include/dds/ddsrt/bswap.h",
    "src/ddsrt/include/dds/ddsrt/xmlparser.h",
    "src/ddsrt/include/dds/ddsrt/expand_vars.h",
    "src/ddsrt/include/dds/ddsrt/iovec.h",
    "src/ddsrt/include/dds/ddsrt/sched.h"
]

# Got this from a CMake build on Ubuntu 20.04 for amd64 arch.
_DDSRT_SRCS = [
    "src/ddsrt/src/bswap.c",
    "src/ddsrt/src/io.c",
    "src/ddsrt/src/log.c",
    "src/ddsrt/src/retcode.c",
    "src/ddsrt/src/strtod.c",
    "src/ddsrt/src/strtol.c",
    "src/ddsrt/src/mh3.c",
    "src/ddsrt/src/avl.c",
    "src/ddsrt/src/environ.c",
    "src/ddsrt/src/expand_vars.c",
    "src/ddsrt/src/fibheap.c",
    "src/ddsrt/src/hopscotch.c",
    "src/ddsrt/src/xmlparser.c",
    "src/ddsrt/src/circlist.c",
    "src/ddsrt/src/atomics.c",
    "src/ddsrt/src/cdtors.c",
    "src/ddsrt/src/environ/posix/environ.c",
    "src/ddsrt/src/heap/posix/heap.c",
    "src/ddsrt/src/ifaddrs.c",
    "src/ddsrt/src/ifaddrs/posix/ifaddrs.c",
    "src/ddsrt/src/random.c",
    "src/ddsrt/src/random/posix/random.c",
    "src/ddsrt/src/rusage/posix/rusage.c",
    "src/ddsrt/src/sockets.c",
    "src/ddsrt/src/sockets/posix/gethostname.c",
    "src/ddsrt/src/sockets/posix/socket.c",
    "src/ddsrt/src/string.c",
    "src/ddsrt/src/sync/posix/sync.c",
    "src/ddsrt/src/threads.c",
    "src/ddsrt/src/threads/posix/threads.c",
    "src/ddsrt/src/time.c",
    "src/ddsrt/src/time/posix/time.c",
    "src/ddsrt/src/md5.c",
    "src/ddsrt/src/process/posix/process.c",
    "src/ddsrt/src/netstat/linux/netstat.c",
    "src/ddsrt/src/dynlib/posix/dynlib.c",
    "src/ddsrt/src/filesystem/posix/filesystem.c",
    # Moved from headers:
    "src/ddsrt/src/threads_priv.h",
    "src/ddsrt/src/sockets_priv.h",
]

_DEFINES = [
    "DDSI_INCLUDE_NETWORK_PARTITIONS",
    "DDSI_INCLUDE_SSM",
    "DDSI_INCLUDE_LIFESPAN",
    "DDSI_INCLUDE_DEADLINE_MISSED",
    "ddsc_EXPORTS",
    "DDSRT_WITH_DNS=1",
    "DDSRT_WITH_FREERTOS=0",
    "DDSRT_WITH_LWIP=0",
]

cc_library(
    name = "ddsrt",
    hdrs = _DDSRT_HDRS + [":export_h", "config_h"],
    srcs = _DDSRT_SRCS,
    includes = [
        "include",
        "src/ddsrt/include",
        "src/ddsrt/src",
    ],
    linkopts = ["-lpthread"],
    deps = [],
)

_DDSI_SRCS = [
    "ddsi_eth.c",
    "ddsi_eth.h",  # Manually added!
    "ddsi_ssl.c",
    "ddsi_tcp.c",
    "ddsi_tran.c",
    "ddsi_udp.c",
    "ddsi_raweth.c",
    "ddsi_ipaddr.c",
    "ddsi_mcgroup.c",
    "ddsi_security_util.c",
    "ddsi_security_omg.c",
    "ddsi_portmapping.c",
    "ddsi_handshake.c",
    "ddsi_serdata.c",
    "ddsi_serdata_default.c",
    "ddsi_serdata_pserop.c",
    "ddsi_serdata_plist.c",
    "ddsi_sertopic.c",
    "ddsi_sertype_pserop.c",
    "ddsi_sertype_plist.c",
    "ddsi_statistics.c",
    "ddsi_iid.c",
    "ddsi_tkmap.c",
    "ddsi_vendor.c",
    "ddsi_threadmon.c",
    "ddsi_rhc.c",
    "ddsi_pmd.c",
    "ddsi_entity_index.c",
    "ddsi_deadline.c",
    "ddsi_deliver_locally.c",
    "ddsi_plist.c",
    "ddsi_cdrstream.c",
    "ddsi_time.c",
    "ddsi_ownip.c",
    "ddsi_acknack.c",
    "q_addrset.c",
    "q_bitset_inlines.c",
    "q_bswap.c",
    "q_ddsi_discovery.c",
    "q_debmon.c",
    "q_entity.c",
    "q_gc.c",
    "q_init.c",
    "q_lat_estim.c",
    "q_lease.c",
    "q_misc.c",
    "q_pcap.c",
    "q_qosmatch.c",
    "q_radmin.c",
    "q_receive.c",
    "q_sockwaitset.c",
    "q_thread.c",
    "q_transmit.c",
    "q_inverse_uint32_set.c",
    "q_whc.c",
    "q_xevent.c",
    "q_xmsg.c",
    "q_freelist.c",
    "sysdeps.c",
    # ENABLE_LIFESPAN
    "ddsi_lifespan.c",
    "ddsi_xt_typeinfo.c",
    "ddsi_xt_typelookup.c",
    "ddsi_typelib.c",
    "ddsi_xt_typemap.c",
    "ddsi_sertype.c",  # Manually added!
    "ddsi_typewrap.c",  # Manually added!
    "ddsi_sertype_default.c",  # Manually added!
    "ddsi_config.c",  # Manually added!
    "ddsi_typelookup.c",  # Manually added!
    "ddsi_vnet.c",  # Manually added!
    "ddsi_wraddrset.c",  # Manually added!
    "ddsi_list_genptr.c",
]

_DDSI_PRIVATE_HDRS = [
    "ddsi_ssl.h",
    "ddsi_tcp.h",
    "ddsi_tran.h",
    "ddsi_udp.h",
    "ddsi_raweth.h",
    "ddsi_ipaddr.h",
    "ddsi_mcgroup.h",
    "ddsi_plist_generic.h",
    "ddsi_security_util.h",
    "ddsi_security_omg.h",
    "ddsi_portmapping.h",
    "ddsi_handshake.h",
    "ddsi_serdata.h",
    "ddsi_sertopic.h",
    "ddsi_serdata_default.h",
    "ddsi_serdata_pserop.h",
    "ddsi_serdata_plist.h",
    "ddsi_statistics.h",
    "ddsi_iid.h",
    "ddsi_tkmap.h",
    "ddsi_vendor.h",
    "ddsi_threadmon.h",
    "ddsi_builtin_topic_if.h",
    "ddsi_rhc.h",
    "ddsi_guid.h",
    "ddsi_keyhash.h",
    "ddsi_entity_index.h",
    "ddsi_deadline.h",
    "ddsi_deliver_locally.h",
    "ddsi_domaingv.h",
    "ddsi_plist.h",
    "ddsi_xqos.h",
    "ddsi_cdrstream.h",
    "ddsi_time.h",
    "ddsi_ownip.h",
    "ddsi_cfgunits.h",
    "ddsi_cfgelems.h",
    "ddsi_acknack.h",
    "ddsi_pmd.h",  # Manually added!
    "ddsi_locator.h",  # Manually added!
    "ddsi_typelookup.h",  # Manually added!
    "ddsi_sertype.h",  # Manually added!
    "ddsi_typelib.h",  # Manually added!
    "ddsi_list_tmpl.h",  # Manually added!
    "ddsi_typewrap.h",  # Manually added!
    "ddsi_xt_typeinfo.h",  # Manually added!
    "ddsi_xt_typemap.h",  # Manually added!
    "ddsi_xt_typelookup.h",  # Manually added!
    "ddsi_security_msg.h",  # Manually added!
    "ddsi_list_genptr.h",  # Manually added!
    "ddsi_shm_transport.h",  # Manually added!
    "ddsi_wraddrset.h",  # Manually added!
    "ddsi_vnet.h",  # Manually added!
    "q_addrset.h",
    "q_bitset.h",
    "q_bswap.h",
    "q_ddsi_discovery.h",
    "q_debmon.h",
    "q_entity.h",
    "q_feature_check.h",
    "q_freelist.h",
    "q_gc.h",
    "q_hbcontrol.h",
    "q_lat_estim.h",
    "q_lease.h",
    "q_log.h",
    "q_misc.h",
    "q_pcap.h",
    "q_protocol.h",
    "q_qosmatch.h",
    "q_radmin.h",
    "q_receive.h",
    "q_rtps.h",
    "q_sockwaitset.h",
    "q_thread.h",
    "q_transmit.h",
    "q_inverse_uint32_set.h",
    "q_unused.h",
    "q_whc.h",
    "q_xevent.h",
    "q_xmsg.h",
    "q_init.h",  # Manually added!
    "sysdeps.h",
    # ENABLE_LIFESPAN
    "ddsi_lifespan.h",
    "ddsi_config.h",
    "ddsi_config_impl.h",
    "ddsi_xt_impl.h",
]

_DDSC_SRCS = [
    "dds_alloc.c",
    "dds_builtin.c",
    "dds_coherent.c",
    "dds_participant.c",
    "dds_reader.c",
    "dds_writer.c",
    "dds_init.c",
    "dds_publisher.c",
    "dds_rhc.c",
    "dds_rhc_default.c",
    "dds_domain.c",
    "dds_instance.c",
    "dds_qos.c",
    "dds_handles.c",
    "dds_entity.c",
    "dds_matched.c",
    "dds_querycond.c",
    "dds_topic.c",
    "dds_listener.c",
    "dds_read.c",
    "dds_waitset.c",
    "dds_readcond.c",
    "dds_guardcond.c",
    "dds_statistics.c",
    "dds_subscriber.c",
    "dds_write.c",
    "dds_whc.c",
    "dds_whc_builtintopic.c",
    "dds_serdata_builtintopic.c",
    "dds_sertype_builtintopic.c",
    "dds_loan.c",
]

_DDSC_PUBLIC_HDRS = [
    "dds.h",
    "ddsc/dds_public_alloc.h",  # Manually added!
    "ddsc/dds_public_error.h",
    "ddsc/dds_public_impl.h",
    "ddsc/dds_public_listener.h",
    "ddsc/dds_public_qos.h",
    "ddsc/dds_public_qosdefs.h",
    "ddsc/dds_public_status.h",
    "ddsc/dds_statistics.h",
    "ddsc/dds_rhc.h",
    "ddsc/dds_internal_api.h",
    "ddsc/dds_basic_types.h",
    "ddsc/dds_opcodes.h",
    "ddsc/dds_loan_api.h",
    "ddsc/dds_data_allocator.h",
]

_DDSC_PRIVATE_HDRS = [
    "dds__alloc.h",
    "dds__builtin.h",
    "dds__domain.h",
    "dds__handles.h",
    "dds__entity.h",
    "dds__init.h",
    "dds__listener.h",
    "dds__participant.h",
    "dds__publisher.h",
    "dds__qos.h",
    "dds__querycond.h",
    "dds__readcond.h",
    "dds__guardcond.h",
    "dds__reader.h",
    "dds__rhc_default.h",
    "dds__statistics.h",
    "dds__subscriber.h",
    "dds__topic.h",
    "dds__types.h",
    "dds__write.h",
    "dds__writer.h",
    "dds__whc.h",
    "dds__whc_builtintopic.h",
    "dds__serdata_builtintopic.h",
    "dds__get_status.h",
    "dds__loan.h",
    "dds__data_allocator.h",
]

cc_library(
    name = "ddsc",
    hdrs = [
        "src/core/ddsc/include/dds/{}".format(f)
        for f in _DDSC_PUBLIC_HDRS
    ] + [":features_h", ":version_h", ":config_h",
    "src/core/ddsi/src/ddsi_cdrstream_write.part.c",
    "src/core/ddsi/src/ddsi_cdrstream_keys.part.c",
    ],
    srcs = [
        "src/core/ddsi/src/{}".format(f)
        for f in _DDSI_SRCS
    ] + [
        "src/core/ddsi/include/dds/ddsi/{}".format(f)
        for f in _DDSI_PRIVATE_HDRS
    ] + [
        "src/core/ddsc/src/{}".format(f)
        for f in _DDSC_SRCS
    ] + [
        "src/core/ddsc/src/{}".format(f)
        for f in _DDSC_PRIVATE_HDRS
    ],
    copts = ["-std=gnu99"],
    defines = _DEFINES,
    includes = [
        "src/core/ddsc/include",
        "src/core/ddsc/src",
        "src/core/ddsi/include",
        "src/core/ddsi/src",
    ],
    visibility = ["//visibility:public"],
    deps = [":ddsrt"],
)
